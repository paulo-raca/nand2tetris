// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //Just renaming instruction wires...

    Or(a=instruction[0], b=false, out=instrJumpGt);
    Or(a=instruction[1], b=false, out=instrJumpEq);
    Or(a=instruction[2], b=false, out=instrJumpLt);
    Or(a=instruction[3], b=false, out=instrDestM);
    Or(a=instruction[4], b=false, out=instrDestD);
    Or(a=instruction[5], b=false, out=instrDestA);

    Or(a=instruction[6], b=false, out=instrAluNo);
    Or(a=instruction[7], b=false, out=instrAluF);
    Or(a=instruction[8], b=false, out=instrAluNy);
    Or(a=instruction[9], b=false, out=instrAluZy);
    Or(a=instruction[10], b=false, out=instrAluNx);
    Or(a=instruction[11], b=false, out=instrAluZx);
    Or(a=instruction[12], b=false, out=instrAluMem);

    Or(a=instruction[15], b=false, out=instructionTypeC);
    Not(in=instructionTypeC, out=instructionTypeA);

    //A-register
    Mux16(a=alu, b=instruction, sel=instructionTypeA, out=inA);
    Or(a=instructionTypeA, b=instrDestA, out=loadA);
    ARegister(in=inA, load=loadA, out=a, out[0..14]=addressM);

    //D-Register
    And(a=instructionTypeC, b=instrDestD, out=loadD);
    DRegister(in=alu, load=loadD, out=d);

    //Memory
    And(a=instructionTypeC, b=instrDestM, out=writeM);

    //A/M mux
    Mux16(a=a, b=inM, sel=instrAluMem, out=am);

    //ALU
    ALU(x=d, y=am, zx=instrAluZx, nx=instrAluNx, zy=instrAluZy, ny=instrAluNy, f=instrAluF, no=instrAluNo, zr=aluEq, ng=aluLt, out=alu, out=outM);

    //Jump conditionals
    Or(a=aluEq, b=aluLt, out=aluLe);
    Not(in=aluLe, out=aluGt);
    And(a=instrJumpGt, b=aluGt, out=jumpGt);
    And(a=instrJumpEq, b=aluEq, out=jumpEq);
    And(a=instrJumpLt, b=aluLt, out=jumpLt);
    Or(a=jumpGt, b=jumpEq, out=jumpGe);
    Or(a=jumpGe, b=jumpLt, out=jump);
    And(a=jump, b=instructionTypeC, out=loadPC);

    //PC
    PC(in=a, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}